<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\obj\SNC7312.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\obj\SNC7312.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060300: Last Updated: Sun May 20 11:12:49 2018
<BR><P>
<H3>Maximum Stack Usage =        160 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; main_loop &rArr; SysLoop &rArr; Select_Date &rArr; display_date_day &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">SVC_Handler</a><BR>
 <LI><a href="#[4]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">PendSV_Handler</a><BR>
 <LI><a href="#[5]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">SysTick_Handler</a><BR>
 <LI><a href="#[9]">CIS_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">CIS_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[9]">CIS_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[12]">CIS_VSYNC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[16]">CT16B0_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[17]">CT16B1_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[18]">CT32B0_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[19]">CT32B1_IRQHandler</a> from count.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[10]">DMA_CSC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[11]">DMA_JPEG_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1d]">DMA_SDNF0_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[d]">DMA_SDNF1_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[7]">DSP_Issue_IRQHandler</a> from SNC7312_ROM_201511271015.sym(ABSOLUTE) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[15]">I2C_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[f]">I2S2_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[6]">MPU_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1c]">NFECC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[25]">P0_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[24]">P1_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[23]">P2_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[22]">P3_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1a]">P4_WKP_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[a]">PPU_HBLK_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[14]">PPU_VBLK_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[21]">RTC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1e]">SARADC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[c]">SD_ADC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[b]">SD_DAC_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[13]">SPI0_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[e]">SPI1_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1b]">UART0_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[8]">USBDEV_IRQHandler</a> from SNC7312_ROM_201511271015.sym(ABSOLUTE) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[20]">USBHOST_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[1f]">WDT_UART1_IRQHandler</a> from startup_snc7312.o(.text) referenced from startup_snc7312.o(RESET)
 <LI><a href="#[27]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_snc7312.o(.text)
 <LI><a href="#[26]">main</a> from main.o(.text) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[27]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[28]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[64]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[66]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[67]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[68]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[69]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[6a]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6b]"></a>__asm___6_main_c_main____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.rev16_text), UNUSED)

<P><STRONG><a name="[6c]"></a>__asm___5_i2c_c_ack____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.rev16_text), UNUSED)

<P><STRONG><a name="[6d]"></a>__asm___6_OLED_c_3b291b77____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(.rev16_text), UNUSED)

<P><STRONG><a name="[6e]"></a>__asm___7_count_c_cde9da0e____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, count.o(.rev16_text), UNUSED)

<P><STRONG><a name="[6f]"></a>__asm___10_fontdata_c_font_CHN____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fontdata.o(.rev16_text), UNUSED)

<P><STRONG><a name="[70]"></a>__asm___21_CT32B1_IRQFlagClear_c_e63edf5e____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_irqflagclear.o(.rev16_text), UNUSED)

<P><STRONG><a name="[71]"></a>__asm___17_CT32B1_MREnable_c_97b1fb95____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_mrenable.o(.rev16_text), UNUSED)

<P><STRONG><a name="[72]"></a>__asm___16_CT32B1_MRValue_c_67ec3f2d____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_mrvalue.o(.rev16_text), UNUSED)

<P><STRONG><a name="[73]"></a>__asm___17_CT32B1_Prescale_c_8821c624____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_prescale.o(.rev16_text), UNUSED)

<P><STRONG><a name="[74]"></a>__asm___15_CT32B1_Enable_c_c4902817____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_enable.o(.rev16_text), UNUSED)

<P><STRONG><a name="[75]"></a>__asm___13_CT32B1_Init_c_a5753c33____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_init.o(.rev16_text), UNUSED)

<P><STRONG><a name="[76]"></a>__asm___18_CT32B1_IRQEnable_c_87871e32____REV16</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_irqenable.o(.rev16_text), UNUSED)

<P><STRONG><a name="[77]"></a>__asm___6_main_c_main____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, main.o(.revsh_text), UNUSED)

<P><STRONG><a name="[78]"></a>__asm___5_i2c_c_ack____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, i2c.o(.revsh_text), UNUSED)

<P><STRONG><a name="[79]"></a>__asm___6_OLED_c_3b291b77____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, oled.o(.revsh_text), UNUSED)

<P><STRONG><a name="[7a]"></a>__asm___7_count_c_cde9da0e____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, count.o(.revsh_text), UNUSED)

<P><STRONG><a name="[7b]"></a>__asm___10_fontdata_c_font_CHN____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, fontdata.o(.revsh_text), UNUSED)

<P><STRONG><a name="[7c]"></a>__asm___21_CT32B1_IRQFlagClear_c_e63edf5e____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_irqflagclear.o(.revsh_text), UNUSED)

<P><STRONG><a name="[7d]"></a>__asm___17_CT32B1_MREnable_c_97b1fb95____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_mrenable.o(.revsh_text), UNUSED)

<P><STRONG><a name="[7e]"></a>__asm___16_CT32B1_MRValue_c_67ec3f2d____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_mrvalue.o(.revsh_text), UNUSED)

<P><STRONG><a name="[7f]"></a>__asm___17_CT32B1_Prescale_c_8821c624____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_prescale.o(.revsh_text), UNUSED)

<P><STRONG><a name="[80]"></a>__asm___15_CT32B1_Enable_c_c4902817____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_enable.o(.revsh_text), UNUSED)

<P><STRONG><a name="[81]"></a>__asm___13_CT32B1_Init_c_a5753c33____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_init.o(.revsh_text), UNUSED)

<P><STRONG><a name="[82]"></a>__asm___18_CT32B1_IRQEnable_c_87871e32____REVSH</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, ct32b1_irqenable.o(.revsh_text), UNUSED)

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>CIS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIS_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CIS_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>CIS_VSYNC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>CT16B0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>CT16B1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>CT32B0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA_CSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA_JPEG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>DMA_SDNF0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>DMA_SDNF1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>I2C_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>I2S2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>MPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>NFECC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>P0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>P1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>P2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>P3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>P4_WKP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>PPU_HBLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PPU_VBLK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SARADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SD_ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>SD_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>SPI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>UART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USBHOST_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>WDT_UART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_snc7312.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>main</STRONG> (Thumb, 186 bytes, Stack size 0 bytes, main.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main &rArr; main_loop &rArr; SysLoop &rArr; Select_Date &rArr; display_date_day &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Peri_Inital (via Veneer)
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPLL_Enable (via Veneer)
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HXTAL_Enable (via Veneer)
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysClk_Setting (via Veneer)
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[34]"></a>I2C_Start</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvice_WriteData
</UL>

<P><STRONG><a name="[35]"></a>I2C_Stop</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvice_WriteData
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
</UL>

<P><STRONG><a name="[36]"></a>I2C_Send_Byte</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Send_Byte
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvice_WriteData
</UL>

<P><STRONG><a name="[37]"></a>I2C_Wait_Ack</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvice_WriteData
</UL>

<P><STRONG><a name="[38]"></a>Dvice_WriteData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, i2c.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>

<P><STRONG><a name="[39]"></a>I2C_Ack</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte
</UL>

<P><STRONG><a name="[3a]"></a>I2C_Read_Byte</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, i2c.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>

<P><STRONG><a name="[3b]"></a>OLED_WrCmd</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvice_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
</UL>

<P><STRONG><a name="[32]"></a>OLED_WrDat</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OLED_WrDat &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dvice_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3c]"></a>OLED_Fill</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Fill &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
</UL>

<P><STRONG><a name="[30]"></a>OLED_CLS</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_CLS &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[31]"></a>OLED_Set_Pos</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Init
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3d]"></a>Draw_BMP</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Draw_BMP &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_sys_stage_1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_no
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_yes
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_cnt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_date
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_tibnum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_arabnum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_day
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_month
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_year
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_english
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_chinese
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[3e]"></a>OLED_CLS_Windows</STRONG> (Thumb, 106 bytes, Stack size 48 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrDat
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_sys_stage_1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_no
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_yes
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_1
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_cnt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_date
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_tibnum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_arabnum
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_day
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_month
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_year
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Language
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_english
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_chinese
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[3f]"></a>OLED_Display_On</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Display_On &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[40]"></a>OLED_Display_Off</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = OLED_Display_Off &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[2f]"></a>OLED_Init</STRONG> (Thumb, 186 bytes, Stack size 8 bytes, oled.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = OLED_Init &rArr; OLED_Fill &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Fill
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_WrCmd
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[61]"></a>KeyInit</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, count.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[41]"></a>Timer_5ms</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_5ms
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_Prescale
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_MRValue
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_MREnable
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_Init
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_IRQEnable
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[19]"></a>CT32B1_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = CT32B1_IRQHandler &rArr; CT32B1_IRQFlagClear &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_IRQFlagClear
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>KeyScan</STRONG> (Thumb, 180 bytes, Stack size 0 bytes, count.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[49]"></a>display_Language_chinese</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = display_Language_chinese &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Language
</UL>

<P><STRONG><a name="[4a]"></a>display_Language_english</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_Language_english &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Language
</UL>

<P><STRONG><a name="[4b]"></a>Select_Language</STRONG> (Thumb, 224 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Select_Language &rArr; display_Language_english &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_english
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_chinese
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[4d]"></a>getdiv</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, count.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_cnt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_date
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_day
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_month
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_year
</UL>

<P><STRONG><a name="[4e]"></a>getremainder</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, count.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_cnt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_date
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_day
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_month
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_year
</UL>

<P><STRONG><a name="[4c]"></a>display_date_year</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_date_year &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getremainder
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
</UL>

<P><STRONG><a name="[4f]"></a>display_date_month</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_date_month &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getremainder
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
</UL>

<P><STRONG><a name="[50]"></a>display_date_day</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_date_day &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getremainder
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
</UL>

<P><STRONG><a name="[51]"></a>Select_Date</STRONG> (Thumb, 420 bytes, Stack size 16 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Select_Date &rArr; display_date_day &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_day
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_month
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_date_year
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_english
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_Language_chinese
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[53]"></a>display_cnt_stage_arabnum</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_cnt_stage_arabnum &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_NumType
</UL>

<P><STRONG><a name="[54]"></a>display_cnt_stage_tibnum</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_cnt_stage_tibnum &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_NumType
</UL>

<P><STRONG><a name="[55]"></a>Select_NumType</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Select_NumType &rArr; display_cnt_stage_tibnum &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_tibnum
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_arabnum
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[56]"></a>display_cnt_stage_date</STRONG> (Thumb, 398 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_cnt_stage_date &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getremainder
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_Stage
</UL>

<P><STRONG><a name="[57]"></a>display_cnt_stage_cnt</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_cnt_stage_cnt &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getremainder
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getdiv
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_Stage
</UL>

<P><STRONG><a name="[58]"></a>Cnt_Stage</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Cnt_Stage &rArr; display_cnt_stage_cnt &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_cnt
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_cnt_stage_date
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[59]"></a>display_rst_cnt_stage_1</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_rst_cnt_stage_1 &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Cnt_Stage
</UL>

<P><STRONG><a name="[5a]"></a>display_rst_cnt_stage_yes</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_rst_cnt_stage_yes &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Sys_Stage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Cnt_Stage
</UL>

<P><STRONG><a name="[5b]"></a>display_rst_cnt_stage_no</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_rst_cnt_stage_no &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Sys_Stage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Cnt_Stage
</UL>

<P><STRONG><a name="[5c]"></a>Rst_Cnt_Stage</STRONG> (Thumb, 236 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Rst_Cnt_Stage &rArr; display_rst_cnt_stage_no &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_no
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_yes
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_1
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[5d]"></a>display_rst_sys_stage_1</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = display_rst_sys_stage_1 &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Sys_Stage
</UL>

<P><STRONG><a name="[5e]"></a>Rst_Sys_Stage</STRONG> (Thumb, 238 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Rst_Sys_Stage &rArr; display_rst_sys_stage_1 &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_sys_stage_1
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_no
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_rst_cnt_stage_yes
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[5f]"></a>SysLoop</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SysLoop &rArr; Select_Date &rArr; display_date_day &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Sys_Stage
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Rst_Cnt_Stage
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Cnt_Stage
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_NumType
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Language
</UL>
<BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop
</UL>

<P><STRONG><a name="[33]"></a>main_loop</STRONG> (Thumb, 298 bytes, Stack size 8 bytes, count.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = main_loop &rArr; SysLoop &rArr; Select_Date &rArr; display_date_day &rArr; OLED_CLS_Windows &rArr; OLED_Set_Pos &rArr; OLED_WrCmd &rArr; Dvice_WriteData &rArr; I2C_Wait_Ack &rArr; I2C_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyScan
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;KeyInit
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_Off
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Display_On
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_CLS_Windows
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Draw_BMP
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OLED_Set_Pos
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1usFor96MHz (via Veneer)
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48]"></a>CT32B1_IRQFlagClear</STRONG> (Thumb, 62 bytes, Stack size 4 bytes, ct32b1_irqflagclear.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CT32B1_IRQFlagClear &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_IRQHandler
</UL>

<P><STRONG><a name="[45]"></a>CT32B1_MREnable</STRONG> (Thumb, 222 bytes, Stack size 0 bytes, ct32b1_mrenable.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
</UL>

<P><STRONG><a name="[46]"></a>CT32B1_MRValue</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, ct32b1_mrvalue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
</UL>

<P><STRONG><a name="[44]"></a>CT32B1_Prescale</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ct32b1_prescale.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
</UL>

<P><STRONG><a name="[47]"></a>CT32B1_Enable</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ct32b1_enable.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
</UL>

<P><STRONG><a name="[42]"></a>CT32B1_Init</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ct32b1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
</UL>

<P><STRONG><a name="[43]"></a>CT32B1_IRQEnable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, ct32b1_irqenable.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_5ms
</UL>

<P><STRONG><a name="[83]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[52]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Date
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[63]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[29]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[85]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[87]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[60]"></a>__ARM_common_switch8</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, count.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CT32B1_IRQFlagClear
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysLoop
</UL>

<P><STRONG><a name="[88]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[89]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[8a]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2e]"></a>Delay1usFor96MHz</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Read_Byte (via Veneer)
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Ack (via Veneer)
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Wait_Ack (via Veneer)
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Send_Byte (via Veneer)
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop (via Veneer)
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start (via Veneer)
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main_loop (via Veneer)
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[2d]"></a>SysClk_Setting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[2b]"></a>HXTAL_Enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[2c]"></a>SPLL_Enable</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[2a]"></a>Peri_Inital</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main (via Veneer)
</UL>

<P><STRONG><a name="[8]"></a>USBDEV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DSP_Issue_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, SNC7312_ROM_201511271015.sym(ABSOLUTE), UNUSED)
<BR>[Address Reference Count : 1]<UL><LI> startup_snc7312.o(RESET)
</UL><P>
<H3>
Local Symbols
</H3><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
