C51 COMPILER V9.54   MOTOR                                                                 05/25/2019 16:28:10 PAGE 1   


C51 COMPILER V9.54, COMPILATION OF MODULE MOTOR
OBJECT MODULE PLACED IN .\Output\motor.obj
COMPILER INVOKED BY: D:\keil\C51\BIN\C51.EXE Code\motor.c ROM(COMPACT) OPTIMIZE(8,SIZE) BROWSE INCDIR(..\..\Include;..\I
                    -nclude) DEFINE(FOSC_160000) DEBUG OBJECTEXTEND PRINT(.\LST\motor.lst) OBJECT(.\Output\motor.obj)

line level    source

   1          #include "N76E003.h"
   2          #include "SFR_Macro.h"
   3          #include "Function_define.h"
   4          #include "dataflash.h"
   5          #include "motor.h"
   6          
   7          
   8          unsigned char Motor_Level;
   9          extern bit BIT_TMP;
  10          bit isStartMotor;
  11          bit isMaxPWM;
  12          unsigned int cur_Motor_PWM;
  13          unsigned char Motor_Wakeup_cnt;
  14          unsigned char Motor_done_cnt;
  15          bit isMotorRun;
  16          unsigned char Motor_Run_cnt;
  17          void MOTOR_FG_PinInterrupt_ISR (void)
  18          {
  19   1              if (Motor_done_cnt > 0)
  20   1                      Motor_done_cnt--;
  21   1      //      Motor_done_cnt = 0;
  22   1              if (isStartMotor)
  23   1              {
  24   2                      isMotorRun = 1;
  25   2              }
  26   1      }
  27          
  28          
  29          void InitPWM(void)
  30          {
  31   1              Motor_Level = 0;
  32   1      //    set_PWMRUN;       
  33   1              P12_PushPull_Mode;
  34   1              P12 = 1;
  35   1              isStartMotor = 0;
  36   1              isMotorRun = 0;
  37   1              Motor_Run_cnt = 0;
  38   1              Motor_done_cnt = 0;
  39   1              P06_PushPull_Mode;
  40   1              P06 = 0;                        //CW
  41   1              P04_PushPull_Mode;      //motor power
  42   1              P04 = 0;
  43   1      }
  44          
  45          void TurnOffMotor(void)
  46          {
  47   1                      clr_EPI;
  48   1                      //turn off
  49   1                      Motor_Level = 0;
  50   1                      PWM0_P12_OUTPUT_DISABLE;
  51   1                      set_SFRPAGE;
  52   1                      PWM0H = 0x00;
  53   1                      PWM0L = 0x00;   
  54   1                      clr_SFRPAGE;
C51 COMPILER V9.54   MOTOR                                                                 05/25/2019 16:28:10 PAGE 2   

  55   1                      set_LOAD;
  56   1                      clr_CLRPWM;
  57   1                      //dispower
  58   1                      P12 = 0;        
  59   1                      isStartMotor = 0;
  60   1                      isMotorRun = 0;
  61   1                      Motor_done_cnt = 0;
  62   1                      Motor_Run_cnt = 0;
  63   1                      P04 = 0;
  64   1                      P06 = 0;
  65   1                      P12_PushPull_Mode;
  66   1                      P12 = 0;
  67   1      }
  68          unsigned Change_Motor_PWM(void)
  69          {
  70   1              if (Motor_Level == 0)
  71   1              {
  72   2                      P06 = 1;
  73   2                      set_P1SR_4;
  74   2                      P14_Input_Mode;
  75   2      //              PICON = 0x05;   //port1
  76   2      //              PINEN  = 0x00;
  77   2      //              PIPEN = 0x10;   //IO 4
  78   2                      Enable_INT_Port1;
  79   2                      Enable_BIT4_RasingEdge_Trig;
  80   2                      set_EPI;                                                        // Enable pin interrupt         
  81   2                      
  82   2                      P12_Quasi_Mode;
  83   2                      //enable PWM0
  84   2                      PWM0_P12_OUTPUT_ENABLE;
  85   2                      
  86   2                      PWM_IMDEPENDENT_MODE;
  87   2                      PWM_CLOCK_FSYS;
  88   2                      PWMPH = 0x03;
  89   2                      PWMPL = 0xE7;                                           //0x3E7 = 16KHZ,        0x290=24.46khz
  90   2                      set_SFRPAGE;                                            //PWM4 and PWM5 duty seting is in SFP page 1
  91   2                      PWM0H = 0x01;                                           
  92   2                      PWM0L = 0xF3;
  93   2                      clr_SFRPAGE;                            
  94   2                      set_LOAD;
  95   2      
  96   2                      //pwm low               
  97   2                      set_SFRPAGE;
  98   2                      PWM0H = 0x01;                                           
  99   2                      PWM0L = 0x80;   
 100   2                      clr_SFRPAGE;
 101   2                      set_LOAD;
 102   2                      set_PWMRUN;
 103   2                      
 104   2                      Motor_Level = 1;
 105   2                      cur_Motor_PWM = 0x180;
 106   2                      Motor_Wakeup_cnt = 0;
 107   2                      isMaxPWM = 0;
 108   2                      isStartMotor = 1;
 109   2                      Motor_Run_cnt = 0;
 110   2                      P04 = 1;
 111   2              }
 112   1              else if (Motor_Level == 1)
 113   1              {
 114   2                      Motor_Level = 2;
 115   2                      //pwm mid
 116   2      //              set_SFRPAGE;
C51 COMPILER V9.54   MOTOR                                                                 05/25/2019 16:28:10 PAGE 3   

 117   2      //              PWM0H = 0x00;
 118   2      //              PWM0L = 0xF0;   
 119   2      //              clr_SFRPAGE;
 120   2      //              set_LOAD;
 121   2      //              set_PWMRUN;     
 122   2                      //enable PWM0
 123   2                      PWM0_P12_OUTPUT_ENABLE;
 124   2                      
 125   2                      PWM_IMDEPENDENT_MODE;
 126   2                      PWM_CLOCK_FSYS;
 127   2                      PWMPH = 0x03;
 128   2                      PWMPL = 0xE7;                                           //0x3E7 = 16KHZ,        0x290=24.46khz
 129   2                      set_SFRPAGE;                                            //PWM4 and PWM5 duty seting is in SFP page 1
 130   2                      PWM0H = 0x01;                                           
 131   2                      PWM0L = 0xF3;
 132   2                      clr_SFRPAGE;                            
 133   2                      set_LOAD;
 134   2      
 135   2                      //pwm low               
 136   2                      set_SFRPAGE;
 137   2                      PWM0H = 0x00;                                           
 138   2                      PWM0L = 0xF0;   
 139   2                      clr_SFRPAGE;
 140   2                      set_LOAD;
 141   2                      set_PWMRUN;             
 142   2              }
 143   1              else if (Motor_Level == 2)
 144   1              {
 145   2                      Motor_Level = 4;
 146   2      
 147   2                      //pwm low               
 148   2                      set_SFRPAGE;
 149   2                      PWM0H = 0x01;                                           
 150   2                      PWM0L = 0x80;   
 151   2                      clr_SFRPAGE;
 152   2                      set_LOAD;
 153   2                      set_PWMRUN;
 154   2      
 155   2              }
 156   1              else if (Motor_Level == 4)
 157   1              {
 158   2                      TurnOffMotor();
 159   2              }
 160   1              return Motor_Level;
 161   1      }
 162          
 163          unsigned char get_motor_level(void)
 164          {
 165   1              return Motor_Level;
 166   1      }
 167          
 168          unsigned char cur_pwm(void)
 169          {
 170   1              unsigned int curpwm;
 171   1              if (isMaxPWM == 1)
 172   1                      return 0;
 173   1              curpwm = PWM0H;
 174   1              curpwm = curpwm<<8;
 175   1              curpwm |= PWM0L;
 176   1              if (curpwm > 0x120)
 177   1              {
 178   2                      return 1;
C51 COMPILER V9.54   MOTOR                                                                 05/25/2019 16:28:10 PAGE 4   

 179   2              }
 180   1              else if (curpwm > 0x80)
 181   1              {
 182   2                      return 2;
 183   2              }
 184   1              return 3;
 185   1      }
 186          
 187          unsigned char check_motor_done(void)
 188          {
 189   1              unsigned int curpwm;
 190   1              unsigned char motor_done_cnt_temp;
 191   1              if (isStartMotor)
 192   1              {
 193   2                      Motor_Run_cnt++;
 194   2                      if (Motor_Run_cnt < 20)
 195   2                      {
 196   3                      }
 197   2                      else
 198   2                      {
 199   3                              Motor_done_cnt++;
 200   3                              if (isMotorRun == 0)
 201   3                              {
 202   4                                      if (Motor_Run_cnt > 100)
 203   4                                              return 1;
 204   4                              }
 205   3                              else if (isMotorRun == 1)
 206   3                              {
 207   4                                      curpwm = cur_pwm();
 208   4                                      if (curpwm == 1)
 209   4                                      {
 210   5                                              motor_done_cnt_temp = 10;
 211   5                                      }
 212   4                                      else if (curpwm == 2)
 213   4                                      {
 214   5                                              motor_done_cnt_temp = 5;
 215   5                                      }
 216   4                                      else
 217   4                                      {
 218   5                                              motor_done_cnt_temp = 3;
 219   5                                      }
 220   4                                      if (Motor_done_cnt >= motor_done_cnt_temp)
 221   4                                      {
 222   5                                              return 1;
 223   5                                      }
 224   4                              }
 225   3                      }
 226   2              }
 227   1              if ((Motor_Level == 1)&&(isMaxPWM == 0))
 228   1              {
 229   2                      Motor_Wakeup_cnt++;
 230   2                      if (Motor_Wakeup_cnt >= 20)
 231   2                      {
 232   3                              Motor_Wakeup_cnt = 0;
 233   3                              cur_Motor_PWM-=6;
 234   3                              if (cur_Motor_PWM >= 10)
 235   3                              {
 236   4                                      cur_Motor_PWM -= 6;
 237   4                                      set_SFRPAGE;
 238   4                                      PWM0H = cur_Motor_PWM>>8;
 239   4                                      PWM0L = cur_Motor_PWM&0xFF;     
 240   4                                      clr_SFRPAGE;
C51 COMPILER V9.54   MOTOR                                                                 05/25/2019 16:28:10 PAGE 5   

 241   4                                      set_LOAD;
 242   4                                      clr_CLRPWM;
 243   4                              }
 244   3                              else
 245   3                              {
 246   4                                      isMaxPWM = 1;
 247   4                                      PWM0_P12_OUTPUT_DISABLE;
 248   4                                      set_SFRPAGE;
 249   4                                      PWM0H = 0x00;
 250   4                                      PWM0L = 0x00;   
 251   4                                      clr_SFRPAGE;
 252   4                                      set_LOAD;
 253   4                                      clr_CLRPWM;
 254   4                                      
 255   4                                      //High
 256   4                                      P12 = 0;
 257   4                              }
 258   3                      
 259   3                      }
 260   2              }
 261   1              return 0;
 262   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    770    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      6    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      3    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
